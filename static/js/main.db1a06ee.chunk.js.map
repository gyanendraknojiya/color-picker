{"version":3,"sources":["logo.svg","components/Header.component.js","components/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","AppBar","position","className","style","height","Toolbar","Homepage","hexNums","useState","allColors","setAllColors","copiedColor","setCopiedColor","generateRandomColor","result","n","push","Math","floor","random","join","useEffect","colors","console","log","generateColorArray","setTimeout","length","map","color","text","onCopy","backgroundColor","width","cursor","bottom","letterSpacing","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAAe,I,6DC0BAA,EApBA,WACb,OACE,8BACE,cAACC,EAAA,EAAD,CACEC,SAAS,SACTC,UAAU,mDACVC,MAAO,CAAEC,OAAQ,IAHnB,SAKE,eAACC,EAAA,EAAD,CAASH,UAAU,mBAAnB,UACE,cAAC,IAAD,CAAYA,UAAU,SADxB,eAGE,sBAAMA,UAAU,oB,QCmFXI,EA/FE,WACf,IAAIC,EAAU,CACZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGF,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,MAA7C,mBAAKG,EAAL,KAAkBC,EAAlB,KAEMC,EAAsB,WAE1B,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAOE,KAAKT,EAAQU,KAAKC,MAAsB,GAAhBD,KAAKE,YAEtC,OAAOL,EAAOM,KAAK,KAuBrB,OAZAC,qBAAU,YATiB,WAEzB,IADA,IAAIC,EAAS,GACJP,EAAI,EAAGA,EAAI,IAAKA,IACvBO,EAAON,KAAKH,KAEdU,QAAQC,IAAIF,GAEZZ,EAAa,GAAD,mBAAKD,GAAca,IAG/BG,KACC,IAEHJ,qBAAU,WACJV,GACFe,YAAW,WACTd,EAAe,QACd,OAEJ,CAACD,IAGF,gCACE,cAAC,EAAD,IACA,qBAAKT,UAAU,YAAf,SACE,qBAAKA,UAAU,gBAAf,SACGO,EAAUkB,QACTlB,EAAUmB,KAAI,SAACC,GAAD,OACZ,qBAAK3B,UAAU,0CAAf,SACE,cAAC,kBAAD,CACE4B,KAAI,WAAMD,GACVE,OAAQ,kBAAMnB,EAAeiB,IAF/B,SAIE,qBACE3B,UAAU,mCACVC,MAAO,CACL6B,gBAAgB,IAAD,OAAMH,GACrBzB,OAAQ,IACR6B,MAAO,IACPhC,SAAU,WACViC,OAAQ,WAPZ,SAUE,qBACEhC,UAAU,4CACVC,MAAO,CACLF,SAAU,WACVkC,OAAQ,EACRC,cAAe,IALnB,SAQGzB,GAAeA,IAAgBkB,EAC5B,SADH,WAEOA,sBC5EfQ,MARf,WACE,OACC,mCACA,cAAC,EAAD,OCKYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db1a06ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AcUnitIcon from \"@material-ui/icons/AcUnit\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"static\"\r\n        className=\"bg-black shadow-sm text-white inner-shadow-black\"\r\n        style={{ height: 65 }}\r\n      >\r\n        <Toolbar className=\"font-weight-bold\" >\r\n          <AcUnitIcon className=\"mr-1\" />\r\n          COLOR PICKER\r\n          <span className=\"ml-auto\">\r\n           \r\n          </span>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Header from \"./Header.component\";\r\n\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst Homepage = () => {\r\n  let hexNums = [\r\n    \"0\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"a\",\r\n    \"b\",\r\n    \"c\",\r\n    \"d\",\r\n    \"e\",\r\n    \"f\",\r\n  ];\r\n\r\n  const [allColors, setAllColors] = useState([]);\r\n  let [copiedColor, setCopiedColor] = useState(null);\r\n\r\n  const generateRandomColor = () => {\r\n    let result = [];\r\n    for (let n = 0; n < 6; n++) {\r\n      result.push(hexNums[Math.floor(Math.random() * 16)]);\r\n    }\r\n    return result.join(\"\");\r\n  };\r\n  const generateColorArray = () => {\r\n    let colors = [];\r\n    for (let n = 0; n < 100; n++) {\r\n      colors.push(generateRandomColor());\r\n    }\r\n    console.log(colors);\r\n\r\n    setAllColors([...allColors, ...colors]);\r\n  };\r\n  useEffect(() => {\r\n    generateColorArray();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (copiedColor) {\r\n      setTimeout(() => {\r\n        setCopiedColor(null);\r\n      }, 2000);\r\n    }\r\n  }, [copiedColor]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <div className=\"row mx-0 my-4\">\r\n          {allColors.length &&\r\n            allColors.map((color) => (\r\n              <div className=\"col-md-2 col-sm-3 col-4 p-2 text-center\">\r\n                <CopyToClipboard\r\n                  text={`#${color}`}\r\n                  onCopy={() => setCopiedColor(color)}\r\n                >\r\n                  <div\r\n                    className=\"mx-auto rounded-lg shadow border\"\r\n                    style={{\r\n                      backgroundColor: `#${color}`,\r\n                      height: 115,\r\n                      width: 115,\r\n                      position: \"relative\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"bg-black  px-1 text-white font-13 rounded\"\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        bottom: 0,\r\n                        letterSpacing: 0.5,\r\n                      }}\r\n                    >\r\n                      {copiedColor && copiedColor === color\r\n                        ? \"Copied\"\r\n                        : `#${color}`}\r\n                    </div>\r\n                  </div>\r\n                </CopyToClipboard>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './components/Homepage';\n\nfunction App() {\n  return (\n   <>\n   <Homepage/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./App.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}